#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version 5.4 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// chiwa.sorters.Bubblesort
	c0 [label=<<table title="chiwa.sorters.Bubblesort" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Bubblesort </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Bubblesort() </td></tr>
<tr><td align="left" balign="left"> + sort() </td></tr>
<tr><td align="left" balign="left"> - bubblesort() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// chiwa.sorters.Heapsort
	c1 [label=<<table title="chiwa.sorters.Heapsort" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Heapsort </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Heapsort() </td></tr>
<tr><td align="left" balign="left"> + sort() </td></tr>
<tr><td align="left" balign="left"> - heapsort() </td></tr>
<tr><td align="left" balign="left"> + makeheap(a : int[], root : int, max : int) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// chiwa.sorters.Insertionsort
	c2 [label=<<table title="chiwa.sorters.Insertionsort" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Insertionsort </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Insertionsort() </td></tr>
<tr><td align="left" balign="left"> + sort() </td></tr>
<tr><td align="left" balign="left"> + insertionsort() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// chiwa.sorters.Mergesort
	c3 [label=<<table title="chiwa.sorters.Mergesort" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Mergesort </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Mergesort() </td></tr>
<tr><td align="left" balign="left"> + sort() </td></tr>
<tr><td align="left" balign="left"> + mergesort(low : int, high : int) </td></tr>
<tr><td align="left" balign="left"> + merge(low : int, middle : int, high : int) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// chiwa.sorters.Quicksort
	c4 [label=<<table title="chiwa.sorters.Quicksort" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Quicksort </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Quicksort() </td></tr>
<tr><td align="left" balign="left"> + sort() </td></tr>
<tr><td align="left" balign="left"> - quicksort(lo : int, hi : int) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// fosbos.seminar.sorting.AbstractSortingDecorator
	c5 [label=<<table title="fosbos.seminar.sorting.AbstractSortingDecorator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> AbstractSortingDecorator </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # algorithm : Sorter </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + AbstractSortingDecorator(algorithm : Sorter) </td></tr>
<tr><td align="left" balign="left"> + getAlgorithm() : AbstractSortingMechanics </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + highlightRange(n : int, m : int, color : Color) </font></td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// fosbos.seminar.sorting.AbstractSortingMechanics
	c6 [label=<<table title="fosbos.seminar.sorting.AbstractSortingMechanics" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> AbstractSortingMechanics </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + problem : int[] </td></tr>
<tr><td align="left" balign="left"> + name : String </td></tr>
<tr><td align="left" balign="left"> + numberOfOperations : int </td></tr>
<tr><td align="left" balign="left"> # running : boolean </td></tr>
<tr><td align="left" balign="left"> # decoratedAlgorithm : Sorter </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + AbstractSortingMechanics() </td></tr>
<tr><td align="left" balign="left"> + setRunning(running : boolean) </td></tr>
<tr><td align="left" balign="left"> + isRunning() : boolean </td></tr>
<tr><td align="left" balign="left"> + getNumberOfOperations() : int </td></tr>
<tr><td align="left" balign="left"> + resetNumberOfOperations() </td></tr>
<tr><td align="left" balign="left"> + swap(m : int, n : int) </td></tr>
<tr><td align="left" balign="left"> + compare(m : int, n : int) : int </td></tr>
<tr><td align="left" balign="left"> + assign(i : int, value : int) </td></tr>
<tr><td align="left" balign="left"> + setProblem(problem : int[]) </td></tr>
<tr><td align="left" balign="left"> + setDecoratedAlgorithm(algorithm : Sorter) </td></tr>
<tr><td align="left" balign="left"> + getProblem() : int[] </td></tr>
<tr><td align="left" balign="left"> + getProblemValueAt(i : int) : int </td></tr>
<tr><td align="left" balign="left"> + finish() </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + sort() </font></td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// fosbos.seminar.sorting.Sorter
	c7 [label=<<table title="fosbos.seminar.sorting.Sorter" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Sorter </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + assign(i : int, value : int) </td></tr>
<tr><td align="left" balign="left"> + compare(n : int, m : int) : int </td></tr>
<tr><td align="left" balign="left"> + setDecoratedAlgorithm(sorter : Sorter) </td></tr>
<tr><td align="left" balign="left"> + sort() </td></tr>
<tr><td align="left" balign="left"> + swap(n : int, m : int) </td></tr>
<tr><td align="left" balign="left"> + getProblemValueAt(i : int) : int </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// fosbos.seminar.sorting.decorators.SynchronizedSorter
	c8 [label=<<table title="fosbos.seminar.sorting.decorators.SynchronizedSorter" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SynchronizedSorter </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SynchronizedSorter(algorithm : Sorter) </td></tr>
<tr><td align="left" balign="left"> + swap(m : int, n : int) </td></tr>
<tr><td align="left" balign="left"> + compare(m : int, n : int) : int </td></tr>
<tr><td align="left" balign="left"> + assign(m : int, n : int) </td></tr>
<tr><td align="left" balign="left"> + getProblemValueAt(i : int) : int </td></tr>
<tr><td align="left" balign="left"> + sort() </td></tr>
<tr><td align="left" balign="left"> + setProblem(problem : int[]) </td></tr>
<tr><td align="left" balign="left"> + setDecoratedAlgorithm(algo : Sorter) </td></tr>
<tr><td align="left" balign="left"> + highlightRange(n : int, m : int, color : Color) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// fosbos.seminar.sorting.decorators.VisualFeedbackSorter
	c9 [label=<<table title="fosbos.seminar.sorting.decorators.VisualFeedbackSorter" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> VisualFeedbackSorter </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - paintingComponent : JComponent </td></tr>
<tr><td align="left" balign="left"> - marginTop : int </td></tr>
<tr><td align="left" balign="left"> - marginLeft : int </td></tr>
<tr><td align="left" balign="left"> - marginInBetween : int </td></tr>
<tr><td align="left" balign="left"> - marginInBetweenTop : int </td></tr>
<tr><td align="left" balign="left"> - distanceX : int </td></tr>
<tr><td align="left" balign="left"> - distanceY : int </td></tr>
<tr><td align="left" balign="left"> - rank : int </td></tr>
<tr><td align="left" balign="left"> + dimension : Dimension </td></tr>
<tr><td align="left" balign="left"> - numberOfInstances : int </td></tr>
<tr><td align="left" balign="left"> + colorCompareLeft : Color </td></tr>
<tr><td align="left" balign="left"> + colorCompareRight : Color </td></tr>
<tr><td align="left" balign="left"> + colorSwapRight : Color </td></tr>
<tr><td align="left" balign="left"> + colorSwapLeft : Color </td></tr>
<tr><td align="left" balign="left"> + colorHighlight : Color </td></tr>
<tr><td align="left" balign="left"> + colorGet : Color </td></tr>
<tr><td align="left" balign="left"> + colorAssign : Color </td></tr>
<tr><td align="left" balign="left"> - chart : Chart2D </td></tr>
<tr><td align="left" balign="left"> - trace : ITrace2D </td></tr>
<tr><td align="left" balign="left"> - measurementTrace : ITrace2D </td></tr>
<tr><td align="left" balign="left"> - points : List&lt;TracePoint2D&gt; </td></tr>
<tr><td align="left" balign="left"> - contraints : AbsoluteConstraints </td></tr>
<tr><td align="left" balign="left"> - pointsOfLastSeenOperation : ArrayList&lt;&gt; </td></tr>
<tr><td align="left" balign="left"> - x : AxisLinear </td></tr>
<tr><td align="left" balign="left"> - y : AxisLinear </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + VisualFeedbackSorter(algorithm : Sorter) </td></tr>
<tr><td align="left" balign="left"> - initChart() </td></tr>
<tr><td align="left" balign="left"> + swap(m : int, n : int) </td></tr>
<tr><td align="left" balign="left"> + assign(i : int, value : int) </td></tr>
<tr><td align="left" balign="left"> + getProblemValueAt(i : int) : int </td></tr>
<tr><td align="left" balign="left"> + compare(m : int, n : int) : int </td></tr>
<tr><td align="left" balign="left"> + highlightRange(start : int, end : int, color : Color) </td></tr>
<tr><td align="left" balign="left"> + sort() </td></tr>
<tr><td align="left" balign="left"> + finish() </td></tr>
<tr><td align="left" balign="left"> + setProblem(problem : int[]) </td></tr>
<tr><td align="left" balign="left"> + setDecoratedAlgorithm(sorter : Sorter) </td></tr>
<tr><td align="left" balign="left"> - reset() </td></tr>
<tr><td align="left" balign="left"> + traceSortednessOverOperations() </td></tr>
<tr><td align="left" balign="left"> - initAxis() </td></tr>
<tr><td align="left" balign="left"> - cleanUpHighlights() </td></tr>
<tr><td align="left" balign="left"> - colorizePoint(index : int, color : Color) </td></tr>
<tr><td align="left" balign="left"> ~ calculateConstraints() : AbsoluteConstraints </td></tr>
<tr><td align="left" balign="left"> + registerWith(panel : JComponent) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// fosbos.seminar.sorting.utils.RunnableSortingCollectionDelegator
	c10 [label=<<table title="fosbos.seminar.sorting.utils.RunnableSortingCollectionDelegator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RunnableSortingCollectionDelegator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + stepInterval : int </td></tr>
<tr><td align="left" balign="left"> - algorithms : ArrayList&lt;Sorter&gt; </td></tr>
<tr><td align="left" balign="left"> - threads : ArrayList&lt;Thread&gt; </td></tr>
<tr><td align="left" balign="left"> - stepper : Timer </td></tr>
<tr><td align="left" balign="left"> - paused : boolean </td></tr>
<tr><td align="left" balign="left"> - running : boolean </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RunnableSortingCollectionDelegator() </td></tr>
<tr><td align="left" balign="left"> + isPaused() : boolean </td></tr>
<tr><td align="left" balign="left"> + isRunning() : boolean </td></tr>
<tr><td align="left" balign="left"> + pause() </td></tr>
<tr><td align="left" balign="left"> - safelyRemoveTimer() </td></tr>
<tr><td align="left" balign="left"> + resume() </td></tr>
<tr><td align="left" balign="left"> + add(sorter : Sorter) : boolean </td></tr>
<tr><td align="left" balign="left"> + setProblem(problem : int[]) </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
<tr><td align="left" balign="left"> - buildAlgorithmThreadPool() </td></tr>
<tr><td align="left" balign="left"> + step() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// fosbos.seminar.sorting.utils.RunnableSortingCollectionDelegator.IsRunningPredicate
	c11 [label=<<table title="fosbos.seminar.sorting.utils.RunnableSortingCollectionDelegator.IsRunningPredicate" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> IsRunningPredicate </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ RunnableSortingCollectionDelegator.IsRunningPredicate() </td></tr>
<tr><td align="left" balign="left"> + evaluate(element : Object) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// fosbos.seminar.sorting.utils.RunnableSortingCollectionDelegator.TimedStep
	c12 [label=<<table title="fosbos.seminar.sorting.utils.RunnableSortingCollectionDelegator.TimedStep" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> TimedStep </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ RunnableSortingCollectionDelegator.TimedStep() </td></tr>
<tr><td align="left" balign="left"> + run() </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// fosbos.seminar.sorting.utils.SortingProblemCreator
	c13 [label=<<table title="fosbos.seminar.sorting.utils.SortingProblemCreator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> SortingProblemCreator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + SortingProblemCreator() </td></tr>
<tr><td align="left" balign="left"> + random(size : int) : int[] </td></tr>
<tr><td align="left" balign="left"> + predefined(size : int) : int[] </td></tr>
<tr><td align="left" balign="left"> + flat(size : int) : int[] </td></tr>
<tr><td align="left" balign="left"> + reverse(size : int) : int[] </td></tr>
<tr><td align="left" balign="left"> - buildIntArray(integers : List&lt;Integer&gt;) : int[] </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// fosbos.seminar.sorting.utils.SortingUtils
	c14 [label=<<table title="fosbos.seminar.sorting.utils.SortingUtils" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> SortingUtils </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + setProblem(problem : int[]) </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// fosbos.seminar.sorting.utils.Surveyor
	c15 [label=<<table title="fosbos.seminar.sorting.utils.Surveyor" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Surveyor </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Surveyor() </td></tr>
<tr><td align="left" balign="left"> + levelOfSortedness(items : int[]) : double </td></tr>
		</table></td></tr>
		</table>>, URL="null", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//chiwa.sorters.Bubblesort extends fosbos.seminar.sorting.AbstractSortingMechanics
	c6:p -> c0:p [dir=back,arrowtail=empty];
	//chiwa.sorters.Bubblesort implements fosbos.seminar.sorting.Sorter
	c7:p -> c0:p [dir=back,arrowtail=empty,style=dashed];
	//chiwa.sorters.Heapsort extends fosbos.seminar.sorting.AbstractSortingMechanics
	c6:p -> c1:p [dir=back,arrowtail=empty];
	//chiwa.sorters.Heapsort implements fosbos.seminar.sorting.Sorter
	c7:p -> c1:p [dir=back,arrowtail=empty,style=dashed];
	//chiwa.sorters.Insertionsort extends fosbos.seminar.sorting.AbstractSortingMechanics
	c6:p -> c2:p [dir=back,arrowtail=empty];
	//chiwa.sorters.Insertionsort implements fosbos.seminar.sorting.Sorter
	c7:p -> c2:p [dir=back,arrowtail=empty,style=dashed];
	//chiwa.sorters.Mergesort extends fosbos.seminar.sorting.AbstractSortingMechanics
	c6:p -> c3:p [dir=back,arrowtail=empty];
	//chiwa.sorters.Mergesort implements fosbos.seminar.sorting.Sorter
	c7:p -> c3:p [dir=back,arrowtail=empty,style=dashed];
	//chiwa.sorters.Quicksort extends fosbos.seminar.sorting.AbstractSortingMechanics
	c6:p -> c4:p [dir=back,arrowtail=empty];
	//chiwa.sorters.Quicksort implements fosbos.seminar.sorting.Sorter
	c7:p -> c4:p [dir=back,arrowtail=empty,style=dashed];
	//fosbos.seminar.sorting.AbstractSortingDecorator extends fosbos.seminar.sorting.AbstractSortingMechanics
	c6:p -> c5:p [dir=back,arrowtail=empty];
	//fosbos.seminar.sorting.AbstractSortingMechanics implements fosbos.seminar.sorting.Sorter
	c7:p -> c6:p [dir=back,arrowtail=empty,style=dashed];
	//fosbos.seminar.sorting.Sorter implements fosbos.seminar.sorting.utils.SortingUtils
	c14:p -> c7:p [dir=back,arrowtail=empty,style=dashed];
	//fosbos.seminar.sorting.decorators.SynchronizedSorter extends fosbos.seminar.sorting.AbstractSortingDecorator
	c5:p -> c8:p [dir=back,arrowtail=empty];
	//fosbos.seminar.sorting.decorators.VisualFeedbackSorter extends fosbos.seminar.sorting.AbstractSortingDecorator
	c5:p -> c9:p [dir=back,arrowtail=empty];
	//fosbos.seminar.sorting.utils.RunnableSortingCollectionDelegator implements fosbos.seminar.sorting.utils.SortingUtils
	c14:p -> c10:p [dir=back,arrowtail=empty,style=dashed];
	//fosbos.seminar.sorting.utils.RunnableSortingCollectionDelegator implements java.lang.Runnable
	c16:p -> c10:p [dir=back,arrowtail=empty,style=dashed];
	//fosbos.seminar.sorting.utils.RunnableSortingCollectionDelegator.TimedStep extends java.util.TimerTask
	c17:p -> c12:p [dir=back,arrowtail=empty];
	// java.lang.Runnable
	c16 [label=<<table title="java.lang.Runnable" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Runnable.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Runnable </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + run() </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Runnable.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// java.util.TimerTask
	c17 [label=<<table title="java.util.TimerTask" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/TimerTask.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"><font face="Helvetica-Oblique"> TimerTask </font></td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> ~ lock : Object </td></tr>
<tr><td align="left" balign="left"> ~ state : int </td></tr>
<tr><td align="left" balign="left"> ~ VIRGIN : int </td></tr>
<tr><td align="left" balign="left"> ~ SCHEDULED : int </td></tr>
<tr><td align="left" balign="left"> ~ EXECUTED : int </td></tr>
<tr><td align="left" balign="left"> ~ CANCELLED : int </td></tr>
<tr><td align="left" balign="left"> ~ nextExecutionTime : long </td></tr>
<tr><td align="left" balign="left"> ~ period : long </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # TimerTask() </td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + run() </font></td></tr>
<tr><td align="left" balign="left"> + cancel() : boolean </td></tr>
<tr><td align="left" balign="left"> + scheduledExecutionTime() : long </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/java/util/TimerTask.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

